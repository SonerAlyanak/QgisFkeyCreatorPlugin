# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FirstProject
                                 A QGIS plugin
 FirstProject
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-12-21
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Soner Alyanak
        email                : soneraly@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QMessageBox
from qgis.core import *
from qgis.utils import *
from PyQt5.QtCore import QVariant
from qgis.core import QgsSpatialIndex


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .FirstProject_dialog import FirstProjectDialog
import os.path


class FirstProject:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FirstProject_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FirstProject')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FirstProject', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/FirstProject/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'FirstProject'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&FirstProject'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):

        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FirstProjectDialog()

        self.dlg.show()

        # Fetch the currently loaded layers:
        layers = QgsProject.instance().layerTreeRoot().children()
        if layers is None:
            msg = QMessageBox()
            msg.setWindowTitle("!")
            msg.setText("There is no layer in QGIS")
            msg.setInformativeText("Add layer to your workspace")
            msg.exec_()

        # Clear the comboBox from previous run:
        self.dlg.comboBox.clear()
        self.dlg.comboBox_3.clear()
        # Fill the comboboxes's inside with the name of layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_3.addItems([layer.name() for layer in layers])


        # create method for fill another combobox with the fields list
        def getFieldName():

            # Access with the referencelayer
            ReferenceLayerIndex = self.dlg.comboBox_3.currentIndex()
            ReferenceLayer = layers[ReferenceLayerIndex].layer()
            # Clear the comboBox from previous run:
            self.dlg.comboBox_4.clear()
            # Fill the combobox with the field names by choosen the layer as ReferenceLayer
            self.dlg.comboBox_4.addItems([field.name() for field in ReferenceLayer.fields()])
        # If the user changes the selection of layer
        self.dlg.comboBox_3.currentIndexChanged.connect(getFieldName)

        getFieldName()
        result = self.dlg.exec_()

        if result:
            # Access with the Referencelayer
            ReferenceLayerDlgIndex = self.dlg.comboBox_3.currentIndex()
            ReferenceLayer = layers[ReferenceLayerDlgIndex].layer()
            # Access with the target layer
            TargetLayerIndex = self.dlg.comboBox.currentIndex()
            TargetLayer = layers[TargetLayerIndex].layer()
            # Get field name of the selected in combobox4
            field_name = str(self.dlg.comboBox_4.currentText())
            TargetLayerFeature = TargetLayer.getFeatures()

            layer_provider = TargetLayer.dataProvider()
            # Add a new field into the Targetlayer
            layer_provider.addAttributes([QgsField("FKEY", QVariant.String)])
            # Update after field added
            TargetLayer.updateFields()

            idxFkeyId = TargetLayer.fields().indexFromName('FKEY')

            def getvaluesBylocation():
                textVal = str(self.dlg.comboBox_4.currentText())

                ReferenceLayerSptIndex = QgsSpatialIndex(ReferenceLayer.getFeatures())
                ReferenceLayerFeatures = {feature.id(): feature for (feature) in ReferenceLayer.getFeatures()}
                TargetLayerFeatures = TargetLayer.getFeatures()
                TargetLayer.startEditing()

                for feature in TargetLayerFeatures:
                    for a in ReferenceLayer.getFeatures():
                        if a.geometry().intersects(feature.geometry()):
                            attr = a.attribute(textVal)
                            feature['FKEY'] = attr
                            TargetLayer.updateFeature(feature)
                            break
                    else:
                        nearest = ReferenceLayerSptIndex.nearestNeighbor(feature.geometry(), 1)[0]
                        value = ReferenceLayerFeatures[nearest].attribute(textVal)
                        feature['FKEY'] = value
                        TargetLayer.updateFeature(feature)

                TargetLayer.commitChanges()
            getvaluesBylocation()

            def raiseError():
                for targ_feat in TargetLayerFeature:
                   for ref_feat in ReferenceLayer.getFeatures():
                        # If at least one feature of Targerlayer's geometry contain the feature of Referencelayer's geometry then raise error
                       if targ_feat.geometry().contains(ref_feat.geometry()):
                           layer_provider.deleteAttributes([idxFkeyId])
                           TargetLayer.updateFields()
                           msg = QMessageBox()
                           msg.setWindowTitle("INCORRECT SELECTION")
                           msg.setText("Targetlayer's geometry contain Referencelayer's geometry.")
                           msg.setInformativeText("Swap the selection.")
                           msg.exec_()
                       break
            raiseError()
